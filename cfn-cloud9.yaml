---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for dynamic Cloud 9 setups. Creates a Cloud9
  bootstraps the instance.
Parameters:
  C9InstanceType:
    Description: Cloud9 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: Must be a valid Cloud9 instance type
#  C9EnvType:
#    Description: Environment type.
#    Default: self
#    Type: String
#    AllowedValues:
#      - self
#      - 3rdParty    #use this if you will create cloud9 for another acount
#    ConstraintDescription: must specify self or 3rdParty.
#  OwnerArn:
#    Type: String
#    Description: The Arn of the Cloud9 Owner to be set if 3rdParty deployment.
  C9InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume.
    Default: 80
  
  SubnetId:
    Type: String
    Description: Subnetid where you wantt to launch your Cloud9 Instance, leave empty to launch on default vpc subnet
  
#Conditions:
#  Create3rdPartyResources: !Equals [ !Ref C9EnvType, 3rdParty ]

Conditions: 
  HasSubnetId: !Not [ !Equals [ '', !Ref SubnetId ] ]
  

Resources:
  ################## PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: AWSC9
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ''
              - - C9LambdaPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                Resource: "*"

  ################## LAMBDA BOOTSTRAP FUNCTION ################

  C9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
      - C9BootstrapInstanceLambdaFunction
      - C9Instance
      - C9InstanceProfile
      - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: AWSC9
      ServiceToken:
        Fn::GetAtt:
          - C9BootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: C9Instance
      LabIdeInstanceProfileName:
        Ref: C9InstanceProfile
      LabIdeInstanceProfileArn:
        Fn::GetAtt:
          - C9InstanceProfile
          - Arn

  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWSC9
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - C9LambdaExecutionRole
          - Arn
      Runtime: python3.8
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse

          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      # Get the InstanceId of the Cloud9 IDE
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:Name','Values': ['aws-cloud9-'+event['ResourceProperties']['StackName']+'-'+event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn'],
                          'Name': event['ResourceProperties']['LabIdeInstanceProfileName']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                          # logger.info('instance_state: {}'.format(instance_state))

                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')

                  except Exception as e:
                      # logger.error(e, exc_info=True)
                      # responseData = {'Error': traceback.format_exc(e)}
                      responseData = {'Error': 'Error bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')
  ################## SSM BOOTSRAP HANDLER ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  C9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: AWSC9
      Content: Yaml
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: C9bootstrap
            inputs:
              runCommand:
                - "#!/bin/bash"
                - date
                - echo LANG=en_US.utf-8 >> /etc/environment
                - echo LC_ALL=en_US.UTF-8 >> /etc/environment
                - . /home/ec2-user/.bashrc
                - yum -y remove aws-cli; yum -y install sqlite telnet jq strace tree gcc glibc-static python3 python3-pip gettext bash-completion
                - echo '=== CONFIGURE default python version ==='
                - PATH=$PATH:/usr/bin
                - alternatives --set python /usr/bin/python3.8
                - echo '=== INSTALL and CONFIGURE default software components ==='
                - sudo -H -u ec2-user bash -c "pip install --user -U boto boto3 botocore awscli aws-sam-cli"
                - echo '=== Resizing the Instance volume'
                - !Sub SIZE=${C9InstanceVolumeSize}
                - !Sub REGION=${AWS::Region}
                - |
                  INSTANCEID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                  VOLUMEID=$(aws ec2 describe-instances \
                    --instance-id $INSTANCEID \
                    --query "Reservations[0].Instances[0].BlockDeviceMappings[0].Ebs.VolumeId" \
                    --output text --region $REGION)
                  aws ec2 modify-volume --volume-id $VOLUMEID --size $SIZE --region $REGION
                  while [ \
                    "$(aws ec2 describe-volumes-modifications \
                      --volume-id $VOLUMEID \
                      --filters Name=modification-state,Values="optimizing","completed" \
                      --query "length(VolumesModifications)"\
                      --output text --region $REGION)" != "1" ]; do
                  sleep 1
                  done
                  if [ $(readlink -f /dev/xvda) = "/dev/xvda" ]
                  then
                    sudo growpart /dev/xvda 1
                    STR=$(cat /etc/os-release)
                    SUB="VERSION_ID=\"2\""
                    if [[ "$STR" == *"$SUB"* ]]
                    then
                      sudo xfs_growfs -d /
                    else
                      sudo resize2fs /dev/xvda1
                    fi
                  else
                    sudo growpart /dev/nvme0n1 1
                    STR=$(cat /etc/os-release)
                    SUB="VERSION_ID=\"2\""
                    if [[ "$STR" == *"$SUB"* ]]
                    then
                      sudo xfs_growfs -d /
                    else
                      sudo resize2fs /dev/nvme0n1p1
                    fi
                  fi
                - echo '=== INSTALL and CONFIGURE amplify and setting ENVIRONMENT VARS ==='
                - sudo -H -u ec2-user bash -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash" && sudo -H -u ec2-user bash -c ". ~/.nvm/nvm.sh && nvm install node" && sudo -H -u ec2-user bash -c ". ~/.nvm/nvm.sh && npm install -g @aws-amplify/cli"
                - echo '=== INSTALL and CONFIGURE IaC Tools ==='
                - sudo -H -u ec2-user bash -c ". ~/.nvm/nvm.sh && npm install -g aws-cdk"
                - curl --silent --location -o terraform_0.12.20_linux_amd64.zip https://releases.hashicorp.com/terraform/0.13.5/terraform_0.13.5_linux_amd64.zip && unzip terraform_0.13.5_linux_amd64.zip && mv -f terraform /usr/bin/
                - sudo -H -u ec2-user bash -c "pip install --user -U ansible"
                - echo '=== CONFIGURE kubecrtl and setting ENVIRONMENT VARS ==='
                - curl --silent --location -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
                - chmod +x /usr/bin/kubectl
                - sudo -H -u ec2-user bash -c "kubectl completion bash >>  ~/.bash_completion"
                - sudo -H -u ec2-user bash -c ". /etc/profile.d/bash_completion.sh"
                - sudo -H -u ec2-user bash -c ". ~/.bash_completion"
                - echo '=== CONFIGURE eksctl and setting ENVIRONMENT VARS ==='
                - curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                - mv /tmp/eksctl /usr/local/bin
                - sudo -H -u ec2-user bash -c "eksctl completion bash >> ~/.bash_completion"
                - sudo -H -u ec2-user bash -c ". /etc/profile.d/bash_completion.sh"
                - sudo -H -u ec2-user bash -c ". ~/.bash_completion"
                - echo '=== CONFIGURE awscli and setting ENVIRONMENT VARS ==='
                - echo "complete -C '/usr/local/bin/aws_completer' aws" >> /home/ec2-user/.bashrc
                - mkdir /home/ec2-user/.aws
                - echo '[default]' > /home/ec2-user/.aws/config
                - echo 'output = json' >> /home/ec2-user/.aws/config
                - chmod 600 /home/ec2-user/.aws/config && chmod 600 /home/ec2-user/.aws/credentials
                - echo 'PATH=$PATH:/usr/local/bin' >> /home/ec2-user/.bashrc
                - echo 'export PATH' >> /home/ec2-user/.bashrc
                - echo '=== Installing helm and configure chart repository==='
                - sudo -H -u ec2-user bash -c "curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash"
                - sudo -H -u ec2-user bash -c "helm repo add stable https://charts.helm.sh/stable"
                - chmod +x /usr/local/bin/helm
                - sudo -H -u ec2-user bash -c "helm completion bash >> ~/.bash_completion"
                - sudo -H -u ec2-user bash -c ". /etc/profile.d/bash_completion.sh"
                - sudo -H -u ec2-user bash -c ". ~/.bash_completion"
                - echo '=== CLEANING /home/ec2-user ==='
                - for f in cloud9; do rm -rf /home/ec2-user/$f; done
                - chown -R ec2-user:ec2-user /home/ec2-user/
                - echo '=== PREPARE REBOOT in 1 minute with at ==='
                - FILE=$(mktemp) && echo $FILE && echo '#!/bin/bash' > $FILE && echo 'reboot -f --verbose' >> $FILE && at now + 1 minute -f $FILE
                - echo "Bootstrap completed with return code $?"

  C9BootstrapAssoziation:
    Type: AWS::SSM::Association
    DependsOn: C9OutputBucket
    Properties:
      Name: !Ref C9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:SSMBootstrap
          Values:
            - Active

  ################## INSTANCE #####################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: C9Role

  C9Instance:
    Description: "-"
    DependsOn: C9BootstrapAssoziation
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance
      AutomaticStopTimeMinutes: 3600
      InstanceType:
        Ref: C9InstanceType
      SubnetId : !If [ HasSubnetId, !Ref SubnetId, !Ref "AWS::NoValue" ]
      Name:
        Ref: AWS::StackName
      #OwnerArn: !If [Create3rdPartyResources, !Ref OwnerArn, !Ref "AWS::NoValue" ]
      Tags:
        -
          Key: SSMBootstrap
          Value: Active
        -
          Key: Environment
          Value: AWSC9

Outputs:
  Cloud9IDE:
    Value:
      Fn::Join:
        - ''
        - - https://
          - Ref: AWS::Region
          - ".console.aws.amazon.com/cloud9/ide/"
          - Ref: C9Instance
          - "?region="
          - Ref: AWS::Region
